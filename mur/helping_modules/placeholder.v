/* Generated by Yosys 0.52+104 (git sha1 3d1f2161d, clang++ 18.1.3 -fPIC -O3) */

module placeholder_module(rst_n, in_data, in_valid, in_empty, out_full, \clk$9 , rst, rd_en_fifo, out_data, wr_en_fifo, clk);
  input clk;
  wire clk;
  wire \clk$11 ;
  wire \clk$20 ;
  input \clk$9 ;
  wire \clk$9 ;
  input [519:0] in_data;
  wire [519:0] in_data;
  wire [519:0] \in_data$12 ;
  input in_empty;
  wire in_empty;
  wire \in_empty$13 ;
  input in_valid;
  wire in_valid;
  wire \in_valid$14 ;
  output [519:0] out_data;
  wire [519:0] out_data;
  wire [519:0] \out_data$15 ;
  input out_full;
  wire out_full;
  wire \out_full$16 ;
  output rd_en_fifo;
  wire rd_en_fifo;
  wire \rd_en_fifo$17 ;
  input rst;
  wire rst;
  input rst_n;
  wire rst_n;
  wire \rst_n$18 ;
  output wr_en_fifo;
  wire wr_en_fifo;
  wire \wr_en_fifo$19 ;
  \placeholder_module.main_module  main_module (
    .clk(\clk$9 ),
    .in_data(in_data),
    .in_empty(in_empty),
    .in_valid(in_valid),
    .out_data(out_data),
    .out_full(out_full),
    .rd_en_fifo(rd_en_fifo),
    .rst(rst),
    .wr_en_fifo(wr_en_fifo)
  );
  assign \clk$11  = clk;
  assign \in_data$12  = in_data;
  assign \in_empty$13  = in_empty;
  assign \in_valid$14  = in_valid;
  assign \out_data$15  = out_data;
  assign \out_full$16  = out_full;
  assign \rd_en_fifo$17  = rd_en_fifo;
  assign \rst_n$18  = rst_n;
  assign \wr_en_fifo$19  = wr_en_fifo;
  assign \clk$20  = \clk$9 ;
endmodule

module \placeholder_module.main_module (in_valid, in_empty, out_full, clk, rst, rd_en_fifo, wr_en_fifo, out_data, in_data);
  reg \$auto$verilog_backend.cc:2355:dump_module$1  = 0;
  wire [512:0] \$1 ;
  reg \$10 ;
  reg [519:0] \$11 ;
  wire \$2 ;
  wire \$3 ;
  wire \$4 ;
  wire \$5 ;
  wire \$6 ;
  wire \$7 ;
  wire \$8 ;
  reg \$9 ;
  input clk;
  wire clk;
  wire [511:0] dat_inc;
  input [519:0] in_data;
  wire [519:0] in_data;
  input in_empty;
  wire in_empty;
  input in_valid;
  wire in_valid;
  output [519:0] out_data;
  reg [519:0] out_data = 520'h0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
  input out_full;
  wire out_full;
  output rd_en_fifo;
  reg rd_en_fifo = 1'h0;
  input rst;
  wire rst;
  output wr_en_fifo;
  reg wr_en_fifo = 1'h0;
  assign \$1  = in_data[511:0] + 1'h1;
  assign \$2  = ~ out_full;
  assign \$3  = in_valid & \$2 ;
  assign \$4  = ~ in_valid;
  assign \$5  = ~ in_empty;
  assign \$6  = \$4  & \$5 ;
  assign \$7  = ~ out_full;
  assign \$8  = \$6  & \$7 ;
  always @(posedge clk)
    rd_en_fifo <= \$9 ;
  always @(posedge clk)
    wr_en_fifo <= \$10 ;
  always @(posedge clk)
    out_data <= \$11 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2355:dump_module$1 ) begin end
    \$9  = 1'h0;
    if (\$3 ) begin
    end else if (\$8 ) begin
      \$9  = 1'h1;
    end
    if (rst) begin
      \$9  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2355:dump_module$1 ) begin end
    \$10  = 1'h0;
    if (\$3 ) begin
      \$10  = 1'h1;
    end
    if (rst) begin
      \$10  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2355:dump_module$1 ) begin end
    \$11  = out_data;
    if (\$3 ) begin
      \$11  = { in_data[519:512], \$1 [511:0] };
    end
    if (rst) begin
      \$11  = 520'h0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
    end
  end
  assign dat_inc = \$1 [511:0];
endmodule
